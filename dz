#include <iostream>
#include <cmath>
using namespace::std;
using TElem = int;
using TElem2 = int;

struct Stack {
	TElem2 data;
	Stack* next;
};

void initStack(Stack* top, TElem2 x) {
	top->data = x;
	top->next = NULL;
}

TElem2 popStack(Stack*& top) {
	Stack* t = top;
	top = top->next;
	t->next = NULL;
	TElem2 x = t->data;
	delete t;
	return x;
}

void pushStack(Stack*& top, TElem2 x) {
	Stack* t = new Stack;
	initStack(t, x);
	if (top) {
		t->next = top;
		top = t;
	}
	else
		top = t;
}

struct Tree {
	TElem key;
	Tree* left, * right;
};

Tree* first(TElem x) {
	Tree* root = new Tree;
	root->key = x;
	root->left = NULL;
	root->right = NULL;
	return root;
}

bool add(Tree* root, TElem x) {
	Tree* t = root, * prev = root;
	while (t) {
		prev = t;
		if (t->key == x)
			return 0;
		else
			if (t->key < x)
				t = t->right;
			else
				t = t->left;
	}
	Tree* node = first(x);
	if (x < prev->key)
		prev->left = node;
	else
		prev->right = node;
	return 1;
}

TElem leftLeaf(Tree* root) {
	while (root->left) {
		root = root->left;
	}
	return root->key;
}

Tree* search(Tree* root, TElem x) {
	Tree* t = root;
	while (t) {
		if (t->key == x)
			return t;
		else
			if (x < t->key)
				t = t->left;
			else
				t = t->right;
	}
	return NULL;
}

unsigned int height(Tree* root) {
	if (root == 0)
		return 0;
	int left, right;
	if (root->left != NULL) {
		left = height(root->left);
	}
	else
		left = -1;
	if (root->right != NULL) {
		right = height(root->right);
	}
	else
		right = -1;
	int max;
	if (left > right)
		max = left;
	else
		max = right;
	return max + 1;
}

void print(Tree* root, int level = 0) {
	if (root->right)
		print(root->right, level + 1);
	for (int i = 0; i < level; i++)
		cout << " ";
	cout << root->key << endl;
	if (root->left)
		print(root->left, level + 1);
}

struct avlTree {
	TElem key;
	avlTree* left, * right;
	int height;
	avlTree(int key) {
		this->key = key;
		left = right = 0;
		height = 1;
	}
};

avlTree* avlFirst(TElem x) {
	avlTree* root = new avlTree(x);
	return root;
}

int avlHeight(avlTree* root) {
	if (root)
		return root->height;
	else
		return 0;
}

void avlPrint(avlTree* root, int level = 0) {
	if (root->right)
		avlPrint(root->right, level + 1);
	for (int i = 0; i < level; i++)
		cout << " ";
	cout << root->key << endl;
	if (root->left)
		avlPrint(root->left, level + 1);
}

void fixHeight(avlTree* root) {
	int leftHeight = avlHeight(root->left);
	int rightHeight = avlHeight(root->right);
	root->height = max(leftHeight, rightHeight) + 1;
}

int bfactor(avlTree* root) {
	return avlHeight(root->right) - avlHeight(root->left);
}

avlTree* rotateRight(avlTree* root) {
	avlTree* q = root->left;
	root->left = q->right;
	q->right = root;
	fixHeight(root);
	fixHeight(q);
	return q;
}

avlTree* rotateLeft(avlTree* root) {
	avlTree* q = root->right;
	root->right = q->left;
	q->left = root;
	fixHeight(root);
	fixHeight(q);
	return q;
}

avlTree* balance(avlTree* root) {
	fixHeight(root);
	if (bfactor(root) == 2) {
		if (bfactor(root->right) < 0)
			root->right = rotateRight(root->right);
		return rotateLeft(root);
	}
	if (bfactor(root) == -2) {
		if (bfactor(root->left) > 0)
			root->left = rotateLeft(root->left);
		return rotateRight(root);
	}
	return root;
}

avlTree* avlAdd(avlTree*& root, TElem x) {
	if (!root)
		return new avlTree(x);
	if (x < root->key)
		root->left = avlAdd(root->left, x);
	if (x > root->key)
		root->right = avlAdd(root->right, x);
	return balance(root);
}

avlTree* findmin(avlTree* root) {
	while (root->left)
		root = root->left;
	return root;
}

avlTree* removemin(avlTree* root)
{
	if (root->left == 0)
		return root->right;
	root->left = removemin(root->left);
	return balance(root);
}

avlTree* remove(avlTree* root, int x)
{
	if (!root)
		return 0;
	if (x < root->key)
		root->left = remove(root->left, x);
	else
		if (x > root->key)
			root->right = remove(root->right, x);
		else
		{
			avlTree* l = root->left;
			avlTree* r = root->right;
			delete root;
			if (!r)
				return l;
			avlTree* min = findmin(r);
			min->right = removemin(r);
			min->left = l;
			return balance(min);
		}
	return balance(root);
}

void treeToStack(Tree* root, Stack*& s) {
	if (root) {
		treeToStack(root->left, s);
		pushStack(s, root->key);
		treeToStack(root->right, s);
	}
}

void treeToAvlTree(Tree* root1, avlTree*& root2) {
	Stack* s = NULL;
	treeToStack(root1, s);
	while (s)
		root2 = avlAdd(root2, popStack(s));
}

int main() {
	setlocale(LC_ALL, "RU");
	int arr[] = { 10,12,7,8,3,1,5,4,6,40,26,43 }; // 7,8,3,1,5,4,6 | 3,1,7,5,4,6,8
	int N = size(arr);
	Tree* root1 = first(arr[0]);
	for (int i = 1; i < N; i++) {
		add(root1, arr[i]);
	}
	print(root1);
	cout << "\n=======\n\n";
	avlTree* root2 = NULL;
	treeToAvlTree(root1, root2);
	avlPrint(root2);
	return 0;
}
