#include <iostream>
using namespace::std;
const int ALPHABET_SIZE = 26;

struct TrieNode {
	TrieNode* alphabet[ALPHABET_SIZE];
	bool isEndOfWord;
};

TrieNode* init() {
	TrieNode* p = new TrieNode;
	p->isEndOfWord = false;
	for (int i = 0; i < ALPHABET_SIZE; i++)
		p->alphabet[i] = NULL;
	return p;
}

void insert(TrieNode* root, string key) {
	TrieNode* p = root;
	for (int i = 0; i < key.length(); i++) {
		int index = key[i] - 'a';
		if (!p->alphabet[index])
			p->alphabet[index] = init();
		p = p->alphabet[index];
	}
	p->isEndOfWord = true;
}

bool search(TrieNode* root, string key) {
	TrieNode* p = root;
	for (int i = 0; i < key.length(); i++) {
		int index = key[i] - 'a';
		if (!p->alphabet[index])
			return false;
		p = p->alphabet[index];
	}
	return p->isEndOfWord;
}

bool isEmpty(TrieNode* root) {
	for (int i = 0; i < ALPHABET_SIZE; i++)
		if (root->alphabet[i])
			return false;
	return true;
}

TrieNode* remove(TrieNode* root, string key, int level = 0) {
	if (!root)
		return NULL;
	if (level == key.length()) {
		if (root->isEndOfWord)
			root->isEndOfWord = false;
		if (isEmpty(root)) {
			delete root;
			root = NULL;
		}
		return root;
	}
	int index = key[level] - 'a';
	root->alphabet[index] = remove(root->alphabet[index], key, level + 1);
	if (isEmpty(root) && !root->isEndOfWord) {
		delete root;
		root = NULL;
	}
	return root;
}

void printWord(TrieNode* root, string key = "") {
	TrieNode* p = root;
	if (p->isEndOfWord) {
		cout << key << "\n";
	}
	for (int i = 0; i < ALPHABET_SIZE; i++) {
		if (p->alphabet[i]) {
			char letter = i + 'a';
			printWord(p->alphabet[i], key + letter);
		}
	}
}

int main() {
	TrieNode* root = init();
	string word1 = "";
	string word2 = "";
	string word3 = "";
	string word4 = "";
	insert(root, word1);
	insert(root, word2);
	insert(root, word3);
	insert(root, word4);
	printWord(root);
	cout << search(root, word4);
	remove(root, word4);
	cout << "\n=====\n";
	printWord(root);
	cout << search(root, word4);
	return 0;
}
