#include<iostream>
#include<string>
#include<cstring>
#include<fstream>
using namespace::std;

class Triad {
protected:
	int x;
	int y;
	int z;
public:
	Triad(int x = 0, int y = 0, int z = 0) {
		this->x = x;
		this->y = y;
		this->z = z;
	}

	Triad operator + (int a) {
		Triad obj(this->x + a, this->y + a, this->z + a);
		return obj;
	}
	friend Triad operator + (int a, Triad other) {
		Triad obj(other.x + a, other.y + a, other.z + a);
		return obj;
	}

	Triad operator * (int a) {
		Triad obj(this->x * a, this->y * a, this->z * a);
		return obj;
	}
	friend Triad operator * (int a, Triad other) {
		Triad obj(other.x * a, other.y * a, other.z * a);
		return obj;
	}

	bool operator == (Triad other) {
		return (this->x == other.x && this->y == other.y && this->z == other.z);
	}

	friend ostream& operator << (ostream& os, const Triad& other) {
		os << other.x << "," << other.y << "," << other.z;
		return os;
	}
	friend istream& operator >> (istream& is, Triad& other) {
		is >> other.x >> other.y >> other.z;
		return is;
	}
};

class vector3D : public Triad {
public:
	vector3D(int x = 0, int y = 0, int z = 0) {
		this->x = x;
		this->y = y;
		this->z = z;
	}

	vector3D operator + (vector3D other) {
		vector3D obj(this->x + other.x, this->y + other.y, this->z + other.z);
		return obj;
	}

	int scalProd(vector3D other) {
		return this->x * other.x + this->y * other.y + this->z * other.z;
	}

	friend ostream& operator << (ostream& os, const vector3D& other) {
		os << "(" << other.x << "," << other.y << "," << other.z << ")";
		return os;
	}
};

int main() {
	int choice, n = 0;
	Triad a1, a2;
	vector3D b1, b2;
	cout << "Triad\n1.izmenit n\n2.izmenit a1\n3.izmenit a2\n4.summa (a1+n)\n5.proizv (a1*n)\n6.sravnit (a1==a2)\n\nVector3D\n7.izmenit b1\n8.izmenit b2\n9.summa (b1+b2)\n10.scalprod (b1,b2)\n11.sravnit (b1 == b2)\n\n";
	do {
		cin >> choice;
		switch (choice) {
		case 1:
			cout << "n = ";
			cin >> n;
			break;
		case 2:
			cout << "a1 = ";
			cin >> a1;
			break;
		case 3:
			cout << "a2 = ";
			cin >> a2;
			break;
		case 4:
			cout << "a1 + n = " << a1 + n << endl;
			break;
		case 5:
			cout << "a1 * n = " << a1 * n << endl;
			break;
		case 6:
			cout << "a1 == a2 -> " << (a1 == a2) << endl;
			break;
		case 7:
			cout << "b1 = ";
			cin >> b1;
			break;
		case 8:
			cout << "b2 = ";
			cin >> b2;
			break;
		case 9:
			cout << "b1 + b2 = " << b1 + b2 << endl;
			break;
		case 10:
			cout << "scalprod = " << b1.scalProd(b2) << endl;
			break;
		case 11:
			cout << "b1 == b2 -> " << (b1 == b2) << endl;
			break;
		default:
			break;
		}
	} while (choice != 12);
	return 0;
}
